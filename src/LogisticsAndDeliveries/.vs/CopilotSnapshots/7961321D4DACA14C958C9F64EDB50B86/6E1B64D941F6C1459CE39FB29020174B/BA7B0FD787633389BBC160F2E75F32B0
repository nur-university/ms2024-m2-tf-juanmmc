using LogisticsAndDeliveries.Application.Deliveries.CancelDelivery;
using LogisticsAndDeliveries.Application.Deliveries.GetDeliveries;
using LogisticsAndDeliveries.Application.Deliveries.GetDelivery;
using LogisticsAndDeliveries.Application.Deliveries.MarkDeliveryCompleted;
using LogisticsAndDeliveries.Application.Deliveries.MarkDeliveryFailed;
using LogisticsAndDeliveries.Application.Deliveries.MarkDeliveryInTransit;
using LogisticsAndDeliveries.Application.Deliveries.RegisterDeliveryIncident;
using LogisticsAndDeliveries.Core.Results;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using LogisticsAndDeliveries.WebApi.Extensions;

namespace LogisticsAndDeliveries.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DeliveryController : ControllerBase
    {
        private readonly IMediator _mediator;

        public DeliveryController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpGet("getDelivery")]
        public async Task<IActionResult> GetDelivery([FromQuery] Guid deliveryId)
        {
            var result = await _mediator.Send(new GetDeliveryQuery(deliveryId));
            return result.ToActionResult(this);
        }

        [HttpGet("getDeliveriesByOrder")]
        public async Task<IActionResult> GetDeliveriesByOrder([FromQuery] Guid driverId, [FromQuery] DateOnly scheduledDate)
        {
            var result = await _mediator.Send(new GetDeliveriesByOrderQuery(driverId, scheduledDate));
            return result.ToActionResult(this);
        }

        [HttpPost("cancel")]
        public async Task<IActionResult> CancelDelivery([FromBody] CancelDeliveryCommand request)
        {
            var result = await _mediator.Send(request);
            return result.ToActionResult(this);
        }

        [HttpPost("markFailed")]
        public async Task<IActionResult> MarkDeliveryFailed([FromBody] MarkDeliveryFailedCommand request)
        {
            var result = await _mediator.Send(request);
            return result.ToActionResult(this);
        }

        [HttpPost("markInTransit")]
        public async Task<IActionResult> MarkDeliveryInTransit([FromBody] MarkDeliveryInTransitCommand request)
        {
            var result = await _mediator.Send(request);
            return result.ToActionResult(this);
        }

        [HttpPost("markCompleted")]
        public async Task<IActionResult> MarkDeliveryCompleted([FromBody] MarkDeliveryCompletedCommand request)
        {
            var result = await _mediator.Send(request);
            return result.ToActionResult(this);
        }

        [HttpPost("registerIncident")]
        public async Task<IActionResult> RegisterDeliveryIncident([FromBody] RegisterDeliveryIncidentCommand request)
        {
            var result = await _mediator.Send(request);
            return result.ToActionResult(this);
        }
    }
}
