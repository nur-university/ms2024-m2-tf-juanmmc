using LogisticsAndDeliveries.Core.Abstractions;
using LogisticsAndDeliveries.Infrastructure.Persistence.DomainModel;
using MediatR;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogisticsAndDeliveries.Infrastructure.Persistence
{
    internal class UnitOfWork : IUnitOfWork
    {
        private readonly DomainDbContext _dbContext;
        private readonly IMediator _mediator;

        public UnitOfWork(DomainDbContext dbContext, IMediator mediator)
        {
            _dbContext = dbContext;
            _mediator = mediator;
        }

        public async Task CommitAsync(CancellationToken cancellationToken = default)
        {
            // Collect entries that have domain events
            var entries = _dbContext.ChangeTracker
                .Entries<Entity>()
                .Where(x => x.Entity.DomainEvents.Any())
                .ToList();

            // Flatten domain events
            var domainEvents = entries
                .SelectMany(x => x.Entity.DomainEvents)
                .ToImmutableArray();

            // Persist changes first to ensure referential integrity
            await _dbContext.SaveChangesAsync(cancellationToken);

            // Publish Domain Events after changes are saved
            foreach (var domainEvent in domainEvents)
            {
                await _mediator.Publish(domainEvent, cancellationToken);
            }

            // Clear domain events from entities
            foreach (var entry in entries)
            {
                entry.Entity.ClearDomainEvents();
            }
        }
    }
}
