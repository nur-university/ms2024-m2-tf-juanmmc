using LogisticsAndDeliveries.Core.Abstractions;
using LogisticsAndDeliveries.Domain.Packages.ValueObjects;
using System;

namespace LogisticsAndDeliveries.Domain.Packages
{
    public class Package : AggregateRoot
    {
        public PackageLabel PackageLabel { get; private set; }
        public EvidenceOfDelivery? EvidenceOfDelivery { get; private set; }
        public DeliveryStatus Status { get; private set; }

        public Package(Guid id, PackageLabel packageLabel) : base(id)
        {
            PackageLabel = packageLabel;
            Status = DeliveryStatus.Pending;
        }

        public void MarkInTransit()
        {
            if (Status != DeliveryStatus.Pending)
                throw new InvalidOperationException("Solo se puede pasar a 'InTransit' desde 'Pending'.");
            Status = DeliveryStatus.InTransit;
        }

        public void MarkDelivered(EvidenceOfDelivery evidence)
        {
            if (Status != DeliveryStatus.InTransit)
                throw new InvalidOperationException("Solo se puede pasar a 'Delivered' desde 'InTransit'.");
            EvidenceOfDelivery = evidence;
            Status = DeliveryStatus.Delivered;
        }

        public void MarkFailed()
        {
            if (Status != DeliveryStatus.InTransit)
                throw new InvalidOperationException("Solo se puede pasar a 'Failed' desde 'InTransit'.");
            Status = DeliveryStatus.Failed;
        }

        public void Cancel()
        {
            if (Status == DeliveryStatus.Delivered)
                throw new InvalidOperationException("No se puede cancelar un paquete ya entregado.");
            Status = DeliveryStatus.Cancelled;
        }
    }
}
