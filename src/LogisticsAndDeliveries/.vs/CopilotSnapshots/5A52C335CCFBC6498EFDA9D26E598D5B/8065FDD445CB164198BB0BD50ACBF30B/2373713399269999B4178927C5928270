using LogisticsAndDeliveries.Core.Abstractions;
using LogisticsAndDeliveries.Infrastructure.Persistence.DomainModel;
using MediatR;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogisticsAndDeliveries.Infrastructure.Persistence
{
    internal class UnitOfWork : IUnitOfWork
    {
        private readonly DomainDbContext _dbContext;
        private readonly IMediator _mediator;

        public UnitOfWork(DomainDbContext dbContext, IMediator mediator)
        {
            _dbContext = dbContext;
            _mediator = mediator;
        }

        public async Task CommitAsync(CancellationToken cancellationToken = default)
        {
            // Collect domain events from tracked entities (do not clear yet)
            var eventEntries = _dbContext.ChangeTracker
                .Entries<Entity>()
                .Where(x => x.Entity.DomainEvents.Any())
                .ToList();

            var domainEvents = eventEntries
                .SelectMany(x => x.Entity.DomainEvents.ToImmutableArray())
                .ToList();

            // Persist changes first to avoid reentrancy issues in domain event handlers
            await _dbContext.SaveChangesAsync(cancellationToken);

            // Publish Domain Events after successful commit
            foreach (var domainEvent in domainEvents)
            {
                await _mediator.Publish(domainEvent, cancellationToken);
            }

            // Clear domain events from entities
            foreach (var entry in eventEntries)
            {
                entry.Entity.ClearDomainEvents();
            }
        }
    }
}
