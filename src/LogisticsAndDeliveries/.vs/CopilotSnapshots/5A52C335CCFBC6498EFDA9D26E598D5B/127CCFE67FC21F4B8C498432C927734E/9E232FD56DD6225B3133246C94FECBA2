using LogisticsAndDeliveries.Domain.Packages;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogisticsAndDeliveries.Infrastructure.Persistence.DomainModel.Config
{
    internal class PackageConfig : IEntityTypeConfiguration<Package>
    {
        public void Configure(EntityTypeBuilder<Package> builder)
        {
            builder.ToTable("packages");

            builder.HasKey(p => p.Id);

            builder.Property(p => p.Id)
                .HasColumnName("package_id");

            // PackageLabel como owned type
            builder.OwnsOne(p => p.PackageLabel, label =>
            {
                label.Property(l => l.IdentificationNumber).HasColumnName("identification_number");
                label.Property(l => l.ScheduledDeliveryDate).HasColumnName("scheduled_delivery_date");
                label.Property(l => l.DeliveryId).HasColumnName("delivery_id");

                // PatientData como owned type anidado
                label.OwnsOne(l => l.PatientData, patient =>
                {
                    patient.Property(pd => pd.PatientId).HasColumnName("patient_id");
                    patient.Property(pd => pd.Name).HasColumnName("patient_name");
                    patient.Property(pd => pd.Email).HasColumnName("patient_email");
                    patient.Property(pd => pd.Phone).HasColumnName("patient_phone");
                });

                // DeliveryAddress como owned type anidado
                label.OwnsOne(l => l.DeliveryAddress, address =>
                {
                    address.Property(a => a.Address).HasColumnName("delivery_address");
                    address.Property(a => a.Latitude).HasColumnName("delivery_latitude");
                    address.Property(a => a.Longitude).HasColumnName("delivery_longitude");
                });
            });

            // EvidenceOfDelivery como owned type (puede ser null)
            builder.OwnsOne(p => p.EvidenceOfDelivery, evidence =>
            {
                evidence.Property(e => e.PhotoUrl).HasColumnName("evidence_photo_url");
                evidence.Property(e => e.ReceiverName).HasColumnName("evidence_receiver_name");
                evidence.Property(e => e.ReceiverSignature).HasColumnName("evidence_receiver_signature");
                evidence.Property(e => e.DateAndTimeOfDelivery).HasColumnName("evidence_date_and_time_of_delivery");
                evidence.Property(e => e.Observations).HasColumnName("evidence_observations");
            });

            // Status como enum
            builder.Property(p => p.Status)
                .HasConversion<int>()
                .HasColumnName("status");

            builder.HasMany(p => p.DeliveryIncidents)
                .WithOne()
                .HasForeignKey("package_id")
                .OnDelete(DeleteBehavior.Cascade);

            builder.Metadata.FindNavigation(nameof(Package.DeliveryIncidents))
                ?.SetPropertyAccessMode(PropertyAccessMode.Field);

            builder.Ignore("_domainEvents");
            builder.Ignore(x => x.DomainEvents);
        }
    }
}
